name: Tests

on: [push]

env:
  DOCKER_COMPOSE_VERSION: "v2.20.2"
  ALLURE_REPORT_DIR: "allure-report"
  ALLURE_RESULTS_DIR: "allure-results"

jobs:
  tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4

      - name: Setup Docker
        uses: docker/setup-buildx-action@v3

      - name: Install Docker Compose
        run: |
          curl -L "https://github.com/docker/compose/releases/download/${{ env.DOCKER_COMPOSE_VERSION }}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose

      - name: Download previous Allure report
        id: download-history
        continue-on-error: true
        run: |
          mkdir -p ${{ env.ALLURE_REPORT_DIR }}
          gh run download ${{ github.run_id }} -n previous-allure-report -D ${{ env.ALLURE_REPORT_DIR }} || echo "No previous report found"
          echo "history_exists=$(ls ${{ env.ALLURE_REPORT_DIR }}/history >/dev/null 2>&1 && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT

      - name: Run tests
        id: run-tests
        run: |
          start=$(date +%s)
          docker-compose up --exit-code-from regression
          duration=$(($(date +%s) - start))
          echo "DURATION_SEC=$duration" >> $GITHUB_OUTPUT
          echo "DURATION_READABLE=$(printf '%02d:%02d:%02d' $((duration/3600)) $(( (duration%3600)/60 )) $((duration%60)))" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Prepare Allure history
        if: always()
        run: |
          mkdir -p ${{ env.ALLURE_RESULTS_DIR }}/history
          
          if [ -d "${{ env.ALLURE_REPORT_DIR }}/history" ]; then
            echo "–ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç—á—ë—Ç–∞..."
            cp -r ${{ env.ALLURE_REPORT_DIR }}/history/* ${{ env.ALLURE_RESULTS_DIR }}/history/ || true
          else
            echo "–ü—Ä–µ–¥—ã–¥—É—â–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é..."
          fi

      - name: Generate Allure report
        if: always()
        run: |
          # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –∏ —Ñ–∞–π–ª —Å –Ω—É–∂–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏
          mkdir -p ${{ env.ALLURE_REPORT_DIR }}
          touch ${{ env.ALLURE_REPORT_DIR }}/environment.properties
          chmod 777 ${{ env.ALLURE_REPORT_DIR }}/environment.properties

          # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
          docker-compose run -u root regression /bin/sh -c \
            "allure generate ${{ env.ALLURE_RESULTS_DIR }} --clean -o ${{ env.ALLURE_REPORT_DIR }} && \
            echo 'RUN_NUMBER=${{ github.run_number }}' > ${{ env.ALLURE_REPORT_DIR }}/environment.properties && \
            echo 'GIT_BRANCH=${{ github.ref_name }}' >> ${{ env.ALLURE_REPORT_DIR }}/environment.properties && \
            echo 'DURATION=${{ steps.run-tests.outputs.DURATION_READABLE }}' >> ${{ env.ALLURE_REPORT_DIR }}/environment.properties"

      - name: Parse test results
        if: always()
        id: allure-stats
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          
          SUMMARY_FILE="${{ env.ALLURE_REPORT_DIR }}/widgets/summary.json"
          [ -f "$SUMMARY_FILE" ] || \
            echo '{"statistic":{"total":0,"passed":0,"failed":0,"skipped":0,"broken":0,"canceled":0}}' > "$SUMMARY_FILE"

          TOTAL=$(jq -r '.statistic.total // 0' "$SUMMARY_FILE")
          PASSED=$(jq -r '.statistic.passed // 0' "$SUMMARY_FILE")
          FAILED=$(jq -r '.statistic.failed // 0' "$SUMMARY_FILE")
          SKIPPED=$(jq -r '.statistic.skipped // 0' "$SUMMARY_FILE")
          BROKEN=$(jq -r '.statistic.broken // 0' "$SUMMARY_FILE")
          CANCELED=$(jq -r '.statistic.canceled // 0' "$SUMMARY_FILE")

          calc_percent() {
            [ $TOTAL -gt 0 ] && echo $(( ($1 * 100) / $TOTAL )) || echo 0
          }

          {
            echo "TOTAL=$TOTAL"
            echo "PASSED=$PASSED"
            echo "FAILED=$FAILED"
            echo "SKIPPED=$SKIPPED"
            echo "BROKEN=$BROKEN"
            echo "CANCELED=$CANCELED"
            echo "PASSED_PERCENT=$(calc_percent $PASSED)"
            echo "FAILED_PERCENT=$(calc_percent $FAILED)"
            echo "SKIPPED_PERCENT=$(calc_percent $SKIPPED)"
            echo "BROKEN_PERCENT=$(calc_percent $BROKEN)"
          } >> $GITHUB_OUTPUT

      - name: Upload report artifacts
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: ${{ env.ALLURE_REPORT_DIR }}

      - name: Save report for next run
        uses: actions/upload-artifact@v4
        with:
          name: previous-allure-report
          path: ${{ env.ALLURE_REPORT_DIR }}
          retention-days: 30

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: gh-pages
          folder: ${{ env.ALLURE_REPORT_DIR }}
          clean-exclude: |
            history/*
            widgets/*
          clean: false

      - name: Determine final status
        id: final-status
        run: |
          if [ "${{ steps.allure-stats.outputs.FAILED }}" -gt 0 ] || [ "${{ steps.allure-stats.outputs.BROKEN }}" -gt 0 ]; then
            echo "FINAL_STATUS=‚ùå –û–®–ò–ë–ö–ò" >> $GITHUB_OUTPUT
            echo "FINAL_MESSAGE=‚ö†Ô∏è <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–ø–∞–≤—à–∏—Ö —Ç–µ—Å—Ç–æ–≤!</b>" >> $GITHUB_OUTPUT
          else
            echo "FINAL_STATUS=‚úÖ –£–°–ü–ï–®–ù–û" >> $GITHUB_OUTPUT
            echo "FINAL_MESSAGE=üéâ <b>–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!</b>" >> $GITHUB_OUTPUT
          fi
          # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
          echo "FINAL_MESSAGE: ${{ steps.final-status.outputs.FINAL_MESSAGE }}"

      - name: Send Telegram notification
        if: always()
        uses: appleboy/telegram-action@v1.0.0
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            <b>üöÄ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤</b>
            
            
            <b>–ü—Ä–æ–µ–∫—Ç:</b> ${{ github.repository }}
            <b>–í–µ—Ç–∫–∞:</b> ${{ github.ref_name }}
            <b>–°—Ç–∞—Ç—É—Å:</b> ${{ steps.allure-stats.outputs.FAILED == '0' && '‚úÖ' || '‚ùå' }}
            <b>–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b> ${{ steps.run-tests.outputs.DURATION_READABLE }}
            
            
            <b>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> (${{ steps.allure-stats.outputs.TOTAL }} —Ç–µ—Å—Ç–æ–≤):
            <code>‚îÇ</code> ‚Ä¢ ‚úÖ <b>–£—Å–ø–µ—à–Ω—ã—Ö:</b> ${{ steps.allure-stats.outputs.PASSED }} (${{ steps.allure-stats.outputs.PASSED_PERCENT }}%)
            <code>‚îÇ</code> ‚Ä¢ ‚ùå <b>–£–ø–∞–≤—à–∏—Ö:</b> ${{ steps.allure-stats.outputs.FAILED }} (${{ steps.allure-stats.outputs.FAILED_PERCENT }}%)
            <code>‚îÇ</code> ‚Ä¢ ‚è© <b>–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö:</b> ${{ steps.allure-stats.outputs.SKIPPED }} (${{ steps.allure-stats.outputs.SKIPPED_PERCENT }}%)
            ${{ steps.allure-stats.outputs.BROKEN != '0' && '<code>‚îÇ</code> ‚Ä¢ üõ† <b>–°–ª–æ–º–∞–Ω–Ω—ã—Ö:</b> ' || '' }}${{ steps.allure-stats.outputs.BROKEN != '0' && format('{0} ({1}%)', steps.allure-stats.outputs.BROKEN, steps.allure-stats.outputs.BROKEN_PERCENT) || '' }}            
            
            
            <b>üîó –°—Å—ã–ª–∫–∏</b>:
            <code>‚îÇ</code> ‚Ä¢ <a href="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/">Allure Report</a>
            <code>‚îÇ</code> ‚Ä¢ <a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">GitHub Actions</a>
            
            
            ${{ steps.final-status.outputs.FINAL_MESSAGE }}
          format: html
          disable_web_page_preview: true