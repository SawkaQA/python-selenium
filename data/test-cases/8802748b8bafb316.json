{"uid":"8802748b8bafb316","name":"test_create_pet","fullName":"tests.api.test_reqres_enpoints.TestReqResEndpoints#test_create_pet","historyId":"4cdebf693429381d9fbb925649b87a45","time":{"start":1744488818537,"stop":1744488818750,"duration":213},"status":"failed","statusMessage":"AssertionError: Ошибка создания животного\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","statusTrace":"self = <test_reqres_enpoints.TestReqResEndpoints object at 0x7f4c7d760b90>\nbase_url = 'https://petstore.swagger.io/v2'\ngenerate_faker_data = {'email': 'anastasija76@example.net', 'firstname': 'Владлен', 'id': 2, 'lastname': 'Тихонов', ...}\n\n    def test_create_pet(self, base_url, generate_faker_data):\n        with allure.step(f'Отправляем запрос на создание питомца {generate_faker_data[\"username\"]}'):\n            statuses = ['available', 'sold']\n            data = {\n                \"id\": generate_faker_data['id'],\n                \"category\": {\n                    \"id\": random.randint(4, 444),\n                    \"name\": \"CATS\"\n                },\n                \"name\": faker.first_name(),\n                \"photoUrls\": [\n                    None\n                ],\n                \"tags\": [\n                    {\n                        \"id\": random.randint(3, 333),\n                        \"name\": \"CATS\"\n                    }\n                ],\n                \"status\": random.choice(statuses)\n            }\n    \n            response = requests.post(f'{base_url}/pet', json=data)\n>           assert response.status_code == 200, \"Ошибка создания животного\"\nE           AssertionError: Ошибка создания животного\nE           assert 403 == 200\nE            +  where 403 = <Response [403]>.status_code\n\ntests/api/test_reqres_enpoints.py:48: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":10,"retriesStatusChange":true,"beforeStages":[{"name":"_session_faker","time":{"start":1744488818473,"stop":1744488818536,"duration":63},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false,"attachmentsCount":0},{"name":"base_url","time":{"start":1744488818536,"stop":1744488818536,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false,"attachmentsCount":0},{"name":"generate_faker_data","time":{"start":1744488818536,"stop":1744488818537,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false,"attachmentsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: Ошибка создания животного\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","statusTrace":"self = <test_reqres_enpoints.TestReqResEndpoints object at 0x7f4c7d760b90>\nbase_url = 'https://petstore.swagger.io/v2'\ngenerate_faker_data = {'email': 'anastasija76@example.net', 'firstname': 'Владлен', 'id': 2, 'lastname': 'Тихонов', ...}\n\n    def test_create_pet(self, base_url, generate_faker_data):\n        with allure.step(f'Отправляем запрос на создание питомца {generate_faker_data[\"username\"]}'):\n            statuses = ['available', 'sold']\n            data = {\n                \"id\": generate_faker_data['id'],\n                \"category\": {\n                    \"id\": random.randint(4, 444),\n                    \"name\": \"CATS\"\n                },\n                \"name\": faker.first_name(),\n                \"photoUrls\": [\n                    None\n                ],\n                \"tags\": [\n                    {\n                        \"id\": random.randint(3, 333),\n                        \"name\": \"CATS\"\n                    }\n                ],\n                \"status\": random.choice(statuses)\n            }\n    \n            response = requests.post(f'{base_url}/pet', json=data)\n>           assert response.status_code == 200, \"Ошибка создания животного\"\nE           AssertionError: Ошибка создания животного\nE           assert 403 == 200\nE            +  where 403 = <Response [403]>.status_code\n\ntests/api/test_reqres_enpoints.py:48: AssertionError","steps":[{"name":"Отправляем запрос на создание питомца emeljanovizjaslav","time":{"start":1744488818537,"stop":1744488818749,"duration":212},"status":"failed","statusMessage":"AssertionError: Ошибка создания животного\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code\n","statusTrace":"  File \"/usr/workspace/tests/api/test_reqres_enpoints.py\", line 48, in test_create_pet\n    assert response.status_code == 200, \"Ошибка создания животного\"\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"hasContent":true,"attachmentStep":false,"attachmentsCount":0}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"hasContent":true,"attachmentStep":false,"attachmentsCount":0},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests.api"},{"name":"suite","value":"test_reqres_enpoints"},{"name":"subSuite","value":"TestReqResEndpoints"},{"name":"host","value":"2bdd35e87e7c"},{"name":"thread","value":"7-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.api.test_reqres_enpoints"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"3449bb15745aa42b","status":"passed","time":{"start":1744484768641,"stop":1744484769699,"duration":1058}},{"uid":"68528bf19bd62b9f","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1744484242043,"stop":1744484243061,"duration":1018}},{"uid":"24ea2e9afc80baa6","status":"failed","statusDetails":"AssertionError: assert 'CatTest' == 'Геннадий'\n  \n  - Геннадий\n  + CatTest","time":{"start":1744480957752,"stop":1744480958803,"duration":1051}},{"uid":"e563e4864aa6723b","status":"passed","time":{"start":1744480750538,"stop":1744480751591,"duration":1053}},{"uid":"9962ccf00ed80224","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1744480266153,"stop":1744480267226,"duration":1073}},{"uid":"b2ba380edf60e50","status":"passed","time":{"start":1744479808349,"stop":1744479809313,"duration":964}},{"uid":"460ede9be05ec46b","status":"passed","time":{"start":1744479733089,"stop":1744479734107,"duration":1018}},{"uid":"f08d4e8a8f613706","status":"passed","time":{"start":1744479573216,"stop":1744479575320,"duration":2104}},{"uid":"744e696d38f0cd5e","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1744479263022,"stop":1744479263965,"duration":943}},{"uid":"88485ba9a5f6271e","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1744471036679,"stop":1744471037626,"duration":947}}],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"8802748b8bafb316.json","parameterValues":[]}