{"uid":"a9d830d3b394465e","name":"test_open","fullName":"tests.ui.test_products_page.TestProductsPage#test_open","historyId":"fcc98247d29f8c70da3b083b2cfa2178","time":{"start":1744471038151,"stop":1744471038151,"duration":0},"status":"broken","statusMessage":"selenium.common.exceptions.NoSuchDriverException: Message: Unable to obtain driver for chrome; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors/driver_location","statusTrace":"self = <selenium.webdriver.common.driver_finder.DriverFinder object at 0xffffb8a826c0>\n\n    def _binary_paths(self) -> dict:\n        if self._paths[\"driver_path\"]:\n            return self._paths\n    \n        browser = self._options.capabilities[\"browserName\"]\n        try:\n            path = self._service.path\n            if path:\n                logger.debug(\n                    \"Skipping Selenium Manager; path to %s driver specified in Service class: %s\", browser, path\n                )\n                if not Path(path).is_file():\n                    raise ValueError(f\"The path is not a valid file: {path}\")\n                self._paths[\"driver_path\"] = path\n            else:\n>               output = SeleniumManager().binary_paths(self._to_args())\n\n../local/lib/python3.12/site-packages/selenium/webdriver/common/driver_finder.py:67: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../local/lib/python3.12/site-packages/selenium/webdriver/common/selenium_manager.py:47: in binary_paths\n    args = [str(self._get_binary())] + args\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    @staticmethod\n    def _get_binary() -> Path:\n        \"\"\"Determines the path of the correct Selenium Manager binary.\n    \n        :Returns: The Selenium Manager executable location\n    \n        :Raises: WebDriverException if the platform is unsupported\n        \"\"\"\n    \n        compiled_path = Path(__file__).parent.joinpath(\"selenium-manager\")\n        exe = sysconfig.get_config_var(\"EXE\")\n        if exe is not None:\n            compiled_path = compiled_path.with_suffix(exe)\n    \n        path: Optional[Path] = None\n    \n        if (env_path := os.getenv(\"SE_MANAGER_PATH\")) is not None:\n            logger.debug(\"Selenium Manager set by env SE_MANAGER_PATH to: %s\", env_path)\n            path = Path(env_path)\n        elif compiled_path.exists():\n            path = compiled_path\n        else:\n            allowed = {\n                (\"darwin\", \"any\"): \"macos/selenium-manager\",\n                (\"win32\", \"any\"): \"windows/selenium-manager.exe\",\n                (\"cygwin\", \"any\"): \"windows/selenium-manager.exe\",\n                (\"linux\", \"x86_64\"): \"linux/selenium-manager\",\n                (\"freebsd\", \"x86_64\"): \"linux/selenium-manager\",\n                (\"openbsd\", \"x86_64\"): \"linux/selenium-manager\",\n            }\n    \n            arch = platform.machine() if sys.platform in (\"linux\", \"freebsd\", \"openbsd\") else \"any\"\n            if sys.platform in [\"freebsd\", \"openbsd\"]:\n                logger.warning(\"Selenium Manager binary may not be compatible with %s; verify settings\", sys.platform)\n    \n            location = allowed.get((sys.platform, arch))\n            if location is None:\n>               raise WebDriverException(f\"Unsupported platform/architecture combination: {sys.platform}/{arch}\")\nE               selenium.common.exceptions.WebDriverException: Message: Unsupported platform/architecture combination: linux/aarch64\n\n../local/lib/python3.12/site-packages/selenium/webdriver/common/selenium_manager.py:94: WebDriverException\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture\n    def driver():\n>       driver = webdriver.Chrome()\n\nconftest.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../local/lib/python3.12/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__\n    super().__init__(\n../local/lib/python3.12/site-packages/selenium/webdriver/chromium/webdriver.py:50: in __init__\n    if finder.get_browser_path():\n../local/lib/python3.12/site-packages/selenium/webdriver/common/driver_finder.py:47: in get_browser_path\n    return self._binary_paths()[\"browser_path\"]\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.common.driver_finder.DriverFinder object at 0xffffb8a826c0>\n\n    def _binary_paths(self) -> dict:\n        if self._paths[\"driver_path\"]:\n            return self._paths\n    \n        browser = self._options.capabilities[\"browserName\"]\n        try:\n            path = self._service.path\n            if path:\n                logger.debug(\n                    \"Skipping Selenium Manager; path to %s driver specified in Service class: %s\", browser, path\n                )\n                if not Path(path).is_file():\n                    raise ValueError(f\"The path is not a valid file: {path}\")\n                self._paths[\"driver_path\"] = path\n            else:\n                output = SeleniumManager().binary_paths(self._to_args())\n                if Path(output[\"driver_path\"]).is_file():\n                    self._paths[\"driver_path\"] = output[\"driver_path\"]\n                else:\n                    raise ValueError(f'The driver path is not a valid file: {output[\"driver_path\"]}')\n                if Path(output[\"browser_path\"]).is_file():\n                    self._paths[\"browser_path\"] = output[\"browser_path\"]\n                else:\n                    raise ValueError(f'The browser path is not a valid file: {output[\"browser_path\"]}')\n        except Exception as err:\n            msg = f\"Unable to obtain driver for {browser}\"\n>           raise NoSuchDriverException(msg) from err\nE           selenium.common.exceptions.NoSuchDriverException: Message: Unable to obtain driver for chrome; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors/driver_location\n\n../local/lib/python3.12/site-packages/selenium/webdriver/common/driver_finder.py:78: NoSuchDriverException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1744471036632,"stop":1744471036679,"duration":47},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1744471038151,"stop":1744471038152,"duration":1},"status":"broken","statusMessage":"selenium.common.exceptions.NoSuchDriverException: Message: Unable to obtain driver for chrome; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors/driver_location\n\n","statusTrace":"  File \"/usr/local/lib/python3.12/site-packages/pluggy/_callers.py\", line 167, in _multicall\n    teardown.throw(outcome._exception)\n  File \"/usr/local/lib/python3.12/site-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/pluggy/_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/_pytest/fixtures.py\", line 1140, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/_pytest/fixtures.py\", line 891, in call_fixture_func\n    fixture_result = next(generator)\n                     ^^^^^^^^^^^^^^^\n  File \"/usr/workspace/conftest.py\", line 12, in driver\n    driver = webdriver.Chrome()\n             ^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/chrome/webdriver.py\", line 45, in __init__\n    super().__init__(\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/chromium/webdriver.py\", line 50, in __init__\n    if finder.get_browser_path():\n       ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/common/driver_finder.py\", line 47, in get_browser_path\n    return self._binary_paths()[\"browser_path\"]\n           ^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/common/driver_finder.py\", line 78, in _binary_paths\n    raise NoSuchDriverException(msg) from err\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"stepsCount":0,"hasContent":true,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests.ui"},{"name":"suite","value":"test_products_page"},{"name":"subSuite","value":"TestProductsPage"},{"name":"host","value":"fbb084cd52a9"},{"name":"thread","value":"7-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.ui.test_products_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"a9d830d3b394465e.json","parameterValues":[]}